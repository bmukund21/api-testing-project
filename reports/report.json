{
  "stats": {
    "suites": 5,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-28T14:01:48.658Z",
    "end": "2025-01-28T14:01:48.920Z",
    "duration": 262,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a878d759-a34d-4425-89e0-847cb6516fb8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5f5ecfa0-2b2c-4775-bfec-f6e42b481ca8",
          "title": "Books Search API",
          "fullFile": "/Users/bm/Documents/api-testing-project/tests/integration/books.test.js",
          "file": "/tests/integration/books.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the book when search query matches \"Book1\"",
              "fullTitle": "Books Search API should return the book when search query matches \"Book1\"",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { response, data } = await get('/books/search?query=Book 1', config.tokens.valid);\nexpect(response.status).to.equal(200); // Success\nexpect(data).to.have.property('pageSize');\nexpect(data).to.have.property('results').that.is.an('array');\nexpect(data.results).to.have.length.greaterThan(0);\nconst firstBook = data.results[0];\nexpect(firstBook).to.have.property('book_id').that.is.a('string');\nexpect(firstBook).to.have.property('name').that.is.a('string');\nexpect(firstBook).to.have.property('author_name').that.is.a('string');\nexpect(firstBook).to.have.property('price').that.is.a('string');\nexpect(firstBook).to.have.property('currency').that.is.a('string');\nexpect(firstBook).to.have.property('category').that.is.a('string');\nexpect(firstBook).to.have.property('createdAt').that.is.a('string');",
              "err": {},
              "uuid": "7c877e2c-015c-418a-a16a-778e47c34b03",
              "parentUUID": "5f5ecfa0-2b2c-4775-bfec-f6e42b481ca8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error if token is missing",
              "fullTitle": "Books Search API should return an error if token is missing",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { response, data } = await get('/books/search?query=Book 1');\nexpect(response.status).to.equal(400); // Bad Request\nexpect(data).to.have.property('error', 'Token required');",
              "err": {},
              "uuid": "ed8ed7c4-1452-47fe-92d0-c4571a940a9c",
              "parentUUID": "5f5ecfa0-2b2c-4775-bfec-f6e42b481ca8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error if token is invalid",
              "fullTitle": "Books Search API should return an error if token is invalid",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { response, data } = await get('/books/search?query=Book 1', config.tokens.invalid);\nexpect(response.status).to.equal(401); // Unauthorized\nexpect(data).to.have.property('error', 'Unauthorized');",
              "err": {},
              "uuid": "b18728e6-3b7f-488e-848d-aabc4849a27d",
              "parentUUID": "5f5ecfa0-2b2c-4775-bfec-f6e42b481ca8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7c877e2c-015c-418a-a16a-778e47c34b03",
            "ed8ed7c4-1452-47fe-92d0-c4571a940a9c",
            "b18728e6-3b7f-488e-848d-aabc4849a27d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 51,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "412394ef-d761-4e78-b37e-84f169c3a576",
          "title": "Add to Cart API",
          "fullFile": "/Users/bm/Documents/api-testing-project/tests/integration/cart.test.js",
          "file": "/tests/integration/cart.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return an error if token is missing",
              "fullTitle": "Add to Cart API should return an error if token is missing",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = config.testData.addToCart.validPayload;\nconst { response, data } = await post('/users/123/cart', payload);\nexpect(response.status).to.equal(400);\nexpect(data).to.have.property('error', 'Token required');",
              "err": {},
              "uuid": "f50c71ac-fade-429b-9a0c-754246769a3f",
              "parentUUID": "412394ef-d761-4e78-b37e-84f169c3a576",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add item to the cart successfully with a valid token",
              "fullTitle": "Add to Cart API should add item to the cart successfully with a valid token",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = config.testData.addToCart.validPayload;\nconst { response, data } = await post('/users/123/cart', payload, config.tokens.valid);\nexpect(response.status).to.equal(201);\nexpect(data).to.have.property('cart');\nexpect(data.cart).to.have.property('cart_items').that.is.an('array');\nconst cartItems = data.cart.cart_items;\nexpect(cartItems).to.have.length.greaterThan(0);\nconst firstItem = cartItems[0];\nexpect(firstItem).to.have.property('book_id').that.is.a('string');\nexpect(firstItem).to.have.property('qty').that.is.a('number');\nexpect(firstItem).to.have.property('price').that.is.a('string');\nexpect(firstItem).to.have.property('line_total').that.is.a('string');\nexpect(data.cart).to.have.property('total_amount').that.is.a('string');",
              "err": {},
              "uuid": "7a2bdd51-f5f7-4992-8301-d65e29f0372c",
              "parentUUID": "412394ef-d761-4e78-b37e-84f169c3a576",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error if book_id or quantity is missing",
              "fullTitle": "Add to Cart API should return an error if book_id or quantity is missing",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = config.testData.addToCart.missingFields;\nconst { response, data } = await post('/users/123/cart', payload, config.tokens.valid);\nexpect(response.status).to.equal(400);\nexpect(data).to.have.property('error', 'Book ID and quantity are required');",
              "err": {},
              "uuid": "e1a793de-5754-4cb7-9b1d-1f754e90ea52",
              "parentUUID": "412394ef-d761-4e78-b37e-84f169c3a576",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return unauthorized error if the token is invalid",
              "fullTitle": "Add to Cart API should return unauthorized error if the token is invalid",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = config.testData.addToCart.validPayload;\nconst { response, data } = await post('/users/123/cart', payload, config.tokens.invalid);\nexpect(response.status).to.equal(401);\nexpect(data).to.have.property('error', 'Unauthorized');",
              "err": {},
              "uuid": "cebeac87-1176-40fe-927b-5a5c73a07f6b",
              "parentUUID": "412394ef-d761-4e78-b37e-84f169c3a576",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f50c71ac-fade-429b-9a0c-754246769a3f",
            "7a2bdd51-f5f7-4992-8301-d65e29f0372c",
            "e1a793de-5754-4cb7-9b1d-1f754e90ea52",
            "cebeac87-1176-40fe-927b-5a5c73a07f6b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 38,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0f63ecb6-f1d0-46f3-aa35-27958a63b4c6",
          "title": "Checkout API Tests",
          "fullFile": "/Users/bm/Documents/api-testing-project/tests/integration/checkout.test.js",
          "file": "/tests/integration/checkout.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return error if token is missing",
              "fullTitle": "Checkout API Tests should return error if token is missing",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId = '123';\nconst payload = config.testData.checkout.missingToken;\nconst { response, data } = await post(`/users/${userId}/checkout`, payload);\nexpect(response.status).to.equal(400);\nexpect(data).to.have.property('error', 'Token required');",
              "err": {},
              "uuid": "c81f6c1b-deda-440a-8ba2-9068b6b38dc1",
              "parentUUID": "0f63ecb6-f1d0-46f3-aa35-27958a63b4c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should complete the checkout with valid inputs",
              "fullTitle": "Checkout API Tests should complete the checkout with valid inputs",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId = '123';\nconst payload = config.testData.checkout.validPayload;\nconst { response, data } = await post(`/users/${userId}/checkout`, payload, config.tokens.valid);\nexpect(response.status).to.equal(201);\nexpect(data).to.have.property('cart');\nexpect(data.cart).to.have.property('cart_items').that.is.an('array');\nconst cartItems = data.cart.cart_items;\nexpect(cartItems.length).to.be.greaterThan(0);\nconst firstItem = cartItems[0];\nexpect(firstItem).to.have.property('book_id').that.is.a('string');\nexpect(firstItem).to.have.property('qty').that.is.a('number');\nexpect(firstItem).to.have.property('price').that.is.a('string');\nexpect(firstItem).to.have.property('line_total').that.is.a('string');\nexpect(data.cart).to.have.property('total_amount').that.is.a('string');\nexpect(data).to.have.property('order_id').that.is.a('string');\nexpect(data).to.have.property('status', 'pending');",
              "err": {},
              "uuid": "29bf7634-aea4-410e-89ff-b3aea72b777c",
              "parentUUID": "0f63ecb6-f1d0-46f3-aa35-27958a63b4c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error for payment decline if price exceeds 100",
              "fullTitle": "Checkout API Tests should return error for payment decline if price exceeds 100",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId = '123';\nconst payload = config.testData.checkout.paymentDecline;\nconst { response, data } = await post(`/users/${userId}/checkout`, payload, config.tokens.valid);\nexpect(response.status).to.equal(400);\nexpect(data).to.have.property('error', 'Payment declined');",
              "err": {},
              "uuid": "f3e250be-d80f-49c9-a7a5-500ac4ad23fb",
              "parentUUID": "0f63ecb6-f1d0-46f3-aa35-27958a63b4c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error if book_id, quantity, or price is missing",
              "fullTitle": "Checkout API Tests should return error if book_id, quantity, or price is missing",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId = '123';\nconst payload = config.testData.checkout.missingFields;\nconst { response, data } = await post(`/users/${userId}/checkout`, payload, config.tokens.valid);\nexpect(response.status).to.equal(400);\nexpect(data).to.have.property('error', 'Book ID, quantity, and price are required');",
              "err": {},
              "uuid": "5286fd0b-f266-4d16-91e7-d78b299218f9",
              "parentUUID": "0f63ecb6-f1d0-46f3-aa35-27958a63b4c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c81f6c1b-deda-440a-8ba2-9068b6b38dc1",
            "29bf7634-aea4-410e-89ff-b3aea72b777c",
            "f3e250be-d80f-49c9-a7a5-500ac4ad23fb",
            "5286fd0b-f266-4d16-91e7-d78b299218f9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 54,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e44464cb-5edc-4bf6-bcb6-eb5c2dd992e7",
          "title": "Login API",
          "fullFile": "/Users/bm/Documents/api-testing-project/tests/integration/login.test.js",
          "file": "/tests/integration/login.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should login a user successfully",
              "fullTitle": "Login API should login a user successfully",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userPayload = {\n  username: 'john_doe',\n  password: 'Password123!',\n};\nconst { response, data } = await post('/users/login', userPayload);\nexpect(response.status).to.equal(200); // Successful login\nexpect(data).to.have.property('username', 'john_doe');\nexpect(data).to.have.property('token');\nexpect(data).to.have.property('message', 'Welcome back');",
              "err": {},
              "uuid": "e75eed69-126b-43a9-add8-1738677a6033",
              "parentUUID": "e44464cb-5edc-4bf6-bcb6-eb5c2dd992e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if username is missing",
              "fullTitle": "Login API should fail if username is missing",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userPayload = {\n  password: 'Password123!',\n};\nconst { response, data } = await post('/users/login', userPayload);\nexpect(response.status).to.equal(400); // Bad Request\nexpect(data).to.have.property('error', 'Username and password are required');",
              "err": {},
              "uuid": "3c7bf37f-0eba-4e22-868d-78c6218fab1d",
              "parentUUID": "e44464cb-5edc-4bf6-bcb6-eb5c2dd992e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if password is incorrect",
              "fullTitle": "Login API should fail if password is incorrect",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userPayload = {\n  username: 'john_doe',\n  password: 'WrongPassword!',\n};\nconst { response, data } = await post('/users/login', userPayload);\nexpect(response.status).to.equal(401); // Unauthorized\nexpect(data).to.have.property('error', 'Invalid password');",
              "err": {},
              "uuid": "ec5effea-ab8d-47cf-8f9d-7c45a211576a",
              "parentUUID": "e44464cb-5edc-4bf6-bcb6-eb5c2dd992e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if both username and password are missing",
              "fullTitle": "Login API should fail if both username and password are missing",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userPayload = {};\nconst { response, data } = await post('/users/login', userPayload);\nexpect(response.status).to.equal(400); // Bad Request\nexpect(data).to.have.property('error', 'Username and password are required');",
              "err": {},
              "uuid": "e8551e69-4fa8-4a1a-9741-ea07c1bdfc43",
              "parentUUID": "e44464cb-5edc-4bf6-bcb6-eb5c2dd992e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if user does not exist",
              "fullTitle": "Login API should fail if user does not exist",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userPayload = {\n  username: 'non_existent_user',\n  password: 'Password123!',\n};\nconst { response, data } = await post('/users/login', userPayload);\nexpect(response.status).to.equal(401); // Unauthorized\nexpect(data).to.have.property('error', 'User not found');",
              "err": {},
              "uuid": "3824c379-7485-4d5a-af64-b9e916d5418d",
              "parentUUID": "e44464cb-5edc-4bf6-bcb6-eb5c2dd992e7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e75eed69-126b-43a9-add8-1738677a6033",
            "3c7bf37f-0eba-4e22-868d-78c6218fab1d",
            "ec5effea-ab8d-47cf-8f9d-7c45a211576a",
            "e8551e69-4fa8-4a1a-9741-ea07c1bdfc43",
            "3824c379-7485-4d5a-af64-b9e916d5418d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 44,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c7e15cab-6f11-4952-8aec-c80907e62de0",
          "title": "Register API",
          "fullFile": "/Users/bm/Documents/api-testing-project/tests/integration/register.test.js",
          "file": "/tests/integration/register.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a new user successfully",
              "fullTitle": "Register API should register a new user successfully",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userPayload = generateUser();\nconst { response, data } = await post('/users/register', userPayload);\nexpect(response.status).to.equal(201); // Successful registration (Created)\nexpect(data).to.have.property('username');\nexpect(data).to.have.property('status', 'user registered');",
              "err": {},
              "uuid": "ff2f504b-461d-44f8-aa74-38de5eba8551",
              "parentUUID": "c7e15cab-6f11-4952-8aec-c80907e62de0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if password confirmation is missing",
              "fullTitle": "Register API should fail if password confirmation is missing",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userPayload = {\n  username: generateUser().username,\n  password: config.testData.registration.missingPasswordConfirmation.password,\n};\nconst { response, data } = await post('/users/register', userPayload);\nexpect(response.status).to.equal(400); // Bad Request\nexpect(data).to.have.property('error', 'Password confirmation is required');",
              "err": {},
              "uuid": "a14018e6-067c-4fe0-a42c-cb6946caf9f1",
              "parentUUID": "c7e15cab-6f11-4952-8aec-c80907e62de0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if passwords do not match",
              "fullTitle": "Register API should fail if passwords do not match",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userPayload = {\n  username: generateUser().username,\n  password: config.testData.registration.passwordMismatch.password,\n  password_confirmation: config.testData.registration.passwordMismatch.password_confirmation,\n};\nconst { response, data } = await post('/users/register', userPayload);\nexpect(response.status).to.equal(400); // Bad Request\nexpect(data).to.have.property('error', 'Password and confirmation do not match');",
              "err": {},
              "uuid": "1e078284-306d-4011-917a-337b3e8193a6",
              "parentUUID": "c7e15cab-6f11-4952-8aec-c80907e62de0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if username is already taken",
              "fullTitle": "Register API should fail if username is already taken",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userPayload = {\n  username: 'john_doe',\n  password: config.testData.registration.validUser.password,\n  password_confirmation: config.testData.registration.validUser.password_confirmation,\n};\nconst { response, data } = await post('/users/register', userPayload);\nexpect(response.status).to.equal(400); // Bad Request\nexpect(data).to.have.property('error', 'Username is already taken');",
              "err": {},
              "uuid": "a471ef45-c4e1-4ebe-adac-20823d00c431",
              "parentUUID": "c7e15cab-6f11-4952-8aec-c80907e62de0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail if username contains invalid characters",
              "fullTitle": "Register API should fail if username contains invalid characters",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userPayload = {\n  username: 'invalid@username!',\n  password: config.testData.registration.validUser.password,\n  password_confirmation: config.testData.registration.validUser.password_confirmation,\n};\nconst { response, data } = await post('/users/register', userPayload);\nexpect(response.status).to.equal(400); // Bad Request\nexpect(data).to.have.property('error', 'Username can only contain letters, numbers, hyphens, and underscores');",
              "err": {},
              "uuid": "d8d4a61f-e080-4566-a8b4-8e2db5b0a741",
              "parentUUID": "c7e15cab-6f11-4952-8aec-c80907e62de0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ff2f504b-461d-44f8-aa74-38de5eba8551",
            "a14018e6-067c-4fe0-a42c-cb6946caf9f1",
            "1e078284-306d-4011-917a-337b3e8193a6",
            "a471ef45-c4e1-4ebe-adac-20823d00c431",
            "d8d4a61f-e080-4566-a8b4-8e2db5b0a741"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 33,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "report",
        "overwrite": "true"
      },
      "version": "6.2.0"
    }
  }
}